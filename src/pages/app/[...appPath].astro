---
// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/

import axios from 'axios'

import { catchRedirectResponse } from '~/helpers/astro/request.js'
import { ListingDetails } from '~/helpers/listing-page.js'
import { getPathPartsFromAstroRequest } from '~/helpers/url.js'

import Layout from '~/src/layouts/default.astro'
import Listing from '~/src/components/default-listing.astro'
import VideoListing from '~/src/components/video-listing.astro'


const redirectResponse = await catchRedirectResponse( Astro )

if ( redirectResponse !== null ) {
  return redirectResponse
}


// Get type and slug from the request path
// so that we don't have extra parts for
// urls like /:type/:slug/benchmarks
const [
    pathType,
    pathSlug,
    subSlug = null
] = getPathPartsFromAstroRequest( Astro.request )

const isBenchmarkPage = subSlug === 'benchmarks'

// Create an empty API URL
const apiUrl = new URL( import.meta.env.PUBLIC_API_DOMAIN )

// Use request path parts to set api url path
apiUrl.pathname = `/api/${ pathType }/${ pathSlug }.json`


// Astro Request reference
// https://docs.astro.build/en/reference/api-reference/#astrorequests

// console.log('Astro.params', Astro.params )
// console.log('Astro.request.url', Astro.request.url )
// console.log('Astro.site.pathname', Astro.site.pathname )
// console.log('Astro.request', Astro.request )

const appListing = await axios.get( apiUrl.toString() )
    .then( response => {
        // console.log( 'response', response )
        return response.data
    })

const listingDetails = new ListingDetails( appListing )

const headOptions = listingDetails.headOptions


if ( isBenchmarkPage ) {

    // Preload video thumbnail
    // <link rel="preload" as="image" href="img.png" />
    headOptions.link.push({
        'rel': 'preload',
        'as': 'image',
        'href': `https://i.ytimg.com/vi_webp/${ listingDetails.initialVideo.id }/sddefault.webp`
    })

}

---
<Layout
    headOptions={ headOptions }
>
    { isBenchmarkPage ? (
        <VideoListing
            listing={ appListing }
        />
    ) : (
         <Listing
            listing={ appListing }
        />
    )}

</Layout>
